{"version":3,"sources":["components/SelectCountry.js","App.js","serviceWorker.js","index.js"],"names":["SelectCountry","userId","parseInt","window","location","search","replace","useState","countries","setCountries","searchInput","setSearchInput","extraCountriesCount","setExtraCountriesCount","displayAllToggle","setDisplayAllToggle","countryExistsInDb","setCountryExistsInDb","searchElementRef","useRef","isUserAdminRef","compare","a","b","value","getCountries","func","wait","timeout","args","later","clearTimeout","setTimeout","debounce","fetch","then","response","json","data","filtered","filter","country","includes","trim","toLowerCase","sort","slice","count","length","bool","useEffect","filterUser","user","id","current","isAdmin","focus","Fragment","ref","type","name","placeholder","onChange","e","target","className","map","key","onClick","display","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.773c0ca1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport '../App.css';\n\nexport default function SelectCountry() {\n    // Select user (id=1: admin user, id=2: non-admin) based on query string parameters for simple test toggle purposes only\n    const userId = parseInt(window.location.search.replace(`?user-id=`, ''))===1 ? parseInt(window.location.search.replace(`?user-id=`, '')) : 2;\n\n    // Set max number of countries initially displayed in list\n    const maxDisplay = 4;\n\n    // useState variables and setters\n    const [countries, setCountries] = useState([]);\n    const [searchInput, setSearchInput] = useState('');\n    const [extraCountriesCount, setExtraCountriesCount] = useState(0);\n    const [displayAllToggle, setDisplayAllToggle] = useState(false);\n    const [countryExistsInDb, setCountryExistsInDb] = useState(true);\n\n    // useRef variables\n    const searchElementRef = useRef();\n    const isUserAdminRef = useRef();\n\n    // Function to compare alphabetical order of countries from returned results\n    const compare = (a,b) => a.value > b.value ? 1 : -1;\n\n    // Debounce function\n    const debounce = (func, wait) => {\n        let timeout;\n    \n        // Function to be executed many times. Spread (...args) to capture any number of parameters.\n        return function executedFunction(...args) {\n    \n            // Callback function to be executed after debounce time has elapsed\n            const later = () => {\n                // null timeout to indicate the debounce ended\n                timeout = null;\n                \n                // Execute the callback\n                func(...args);\n            };\n            // Reset waiting every time function executed\n            clearTimeout(timeout);\n            \n            // Restart the debounce waiting period\n            timeout = setTimeout(later, wait);\n        };\n    };\n\n    // Function to get matching countries using debounce\n    let getCountries = debounce(() => {\n        fetch('json/countries.json')\n        .then(response => response.json())\n        .then(data => {\n            const filtered = data.filter(country => country.value.includes(searchInput.trim().toLowerCase())).sort(compare);\n            displayAllToggle ? setCountries(filtered) : setCountries(filtered.slice(0, maxDisplay));\n            setExtraCountriesCount(count => count = filtered.length - maxDisplay);\n            filtered.length > 0 ? setCountryExistsInDb(bool => bool = true) : setCountryExistsInDb(bool => bool = false)\n        });\n    }, 300);\n\n    // Get countries list from JSON to simulate database for test purposes only\n    useEffect(getCountries, [searchInput, displayAllToggle]);\n\n    // Check user's admin rights from JSON to simulate database for test purposes only\n    useEffect(() => {\n        fetch('json/users.json')\n        .then(response => response.json())\n        .then(data => {\n            const filterUser = data.filter(user => user.id===userId);\n            isUserAdminRef.current = filterUser[0].isAdmin;\n            searchElementRef.current.focus(); // On page load, focus on search box\n        });\n    });\n\n    return (\n        <React.Fragment>\n            {/* Search box */}\n            <input\n                ref={searchElementRef}\n                type=\"text\"\n                id=\"search-input\"\n                name=\"searchInput\"\n                value={searchInput}\n                placeholder=\"Search...\"\n                onChange={e => setSearchInput(e.target.value)}\n            />\n\n            {isUserAdminRef.current && !countryExistsInDb ? <button>Add</button> : null}\n\n            {/* Filtered search options */}\n            <div className=\"select-country-container\">\n                {countries.map(country => {\n                    return (\n                        <option\n                            key={`country-${country.id}`}\n                            onClick={e => {\n                                // When country option is selected, populate search input text box with selected country\n                                setSearchInput(e.target.value);\n                                // Focus on search input text box\n                                searchElementRef.current.focus();\n                            }}\n                            name=\"country\"\n                            data={country.id}\n                            value={country.value}\n                            className=\"select-country-option\"\n                        >\n                            {country.display}\n                        </option>\n                    )\n                })}\n                {extraCountriesCount>0 ? <option className=\"more-countries\" onClick={() => setDisplayAllToggle(!displayAllToggle)}>{displayAllToggle ? \"Hide...\" : `${extraCountriesCount} more...`}</option> : null}\n            </div>\n            \n            {/* If country does not exist in database, show message */}\n            {isUserAdminRef.current && !countryExistsInDb ? <p>Couldn't find a match, would you like to add this country?</p> : null}\n            {!isUserAdminRef.current && !countryExistsInDb ? <p>Sorry, couldn't find any countries that match.</p> : null}\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport SelectCountry from \"./components/SelectCountry\"\n\nfunction App() {\n    return <SelectCountry />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}